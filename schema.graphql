scalar ObjectID
scalar Time

type PageInfo {
    totalCount: Int!
    hasNextPage: Boolean!
}

type User {
    _id: ObjectID!
    name: String!
    email: String!
    githubNodeID: String!
    avatarURL: String!
}

type UserEdge {
    node: User!
    cursor: String!
}

type UserConnection {
    pageInfo: PageInfo!
    edges: [UserEdge]!
}

type LoginResponse {
    token: String!
    user: User!
}

type Project {
    _id: ObjectID!
    name: String!
    createdAt: Time!
    owner: User!
}

type ProjectEdge {
    node: Project!
    cursor: String!
}

type ProjectConnection {
    pageInfo: PageInfo!
    edges: [ProjectEdge]!
}

enum BuildJobStatus {
    PENDING
    RUNNING
    SUCCESS
    FAILED
}

type BuildJob {
    _id: ObjectID!
    createdAt: Time!
    status: BuildJobStatus!
    deployment: Deployment!
}

type BuildJobEdge {
    node: BuildJob!
    cursor: String!
}

type BuildJobConnection {
    pageInfo: PageInfo!
    edges: [BuildJobEdge]!
}

enum ServiceTemplate {
    REDIS
    MONGODB
    MYSQL
    POSTGRESQL
    GIT
}

enum DeploymentStatus {
    PENDING
    BUILDING
    DEPLOYING
    RUNNING
    REMOVED
    CRASHED
}

"""
A Deployment is a version of service which built from source code to image,
and deployed to cluster.
"""
type Deployment {
    _id: ObjectID!
    gitProvider: String!
    repoOwner: String!
    repoName: String!
    ref: String!
    commitSHA: String!
    commitMessage: String!
    projectID: ObjectID!
    serviceID: ObjectID!
    buildJobs: BuildJobConnection!
    status: DeploymentStatus!
    createdAt: Time!
}

type DeploymentEdge {
    node: Deployment!
    cursor: String!
}

type DeploymentConnection {
    pageInfo: PageInfo!
    edges: [DeploymentEdge]!
}

type Service {
    _id: ObjectID!
    name: String!
    template: ServiceTemplate!
    project: Project!
    gitProvider: String!
    repoOwner: String!
    repoName: String!
    branchName: String!
}

type ServiceEdge {
    node: Service!
    cursor: String!
}

type ServiceConnection {
    pageInfo: PageInfo!
    edges: [ServiceEdge]!
}

enum LogLevel {
    DEBUG
    INFO
    WARN
    ERROR
}

type Log {
    message: String!
    timestamp: Time!
    level: LogLevel!
}

type Query {

    """
    Get users by pagination.
    """
    users(skip: Int = 0, limit: Int = 10): UserConnection!

    """
    Get user data by ID or name.
    """
    user(_id: ObjectID, name: String): User!

    """
    Get projects of a user.
    """
    projects(skip: Int = 0, limit: Int = 10, ownerID: ObjectID): ProjectConnection!

    """
    Get a project data by ID.
    """
    project(_id: ObjectID!): Project!

    """
    Get services of a project.
    """
    services(skip: Int = 0, limit: Int = 10, projectID: ObjectID): ServiceConnection!

    """
    Get a service by ID.
    """
    service(_id: ObjectID!): Service!

    """
    Get deployments of a service.
    """
    deployments(skip: Int = 0, limit: Int = 10, serviceID: ObjectID): DeploymentConnection!
}

type Mutation {
    """
    create project
    """
    createProject(name: String!): Project!

    """
    create a new service in a project
    """
    createService(
        name: String!,
        template: ServiceTemplate!,
        projectID: ObjectID!,
        gitProvider: String!,
        repoOwner: String!,
        repoName: String!,
        branchName: String!
    ): Service!

    """
    Delete a service
    """
    deleteService(_id: ObjectID!): Boolean!

    """
    Delete a project
    """
    deleteProject(_id: ObjectID!): Boolean!
}

type Subscription {
    buildLogReceived(deploymentID: ObjectID!): Log!
}
